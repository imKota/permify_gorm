package mocks

import (
	"github.com/stretchr/testify/mock"

	"github.com/imKota/permify_gorm/collections"
	"github.com/imKota/permify_gorm/models"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// AddPermissions provides a mock function with given fields: userID, permissions
func (_m *UserRepository) AddPermissions(userID uint, permissions collections.Permission) error {
	ret := _m.Called(userID, permissions)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, collections.Permission) error); ok {
		r0 = rf(userID, permissions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplacePermissions provides a mock function with given fields: userID, permissions
func (_m *UserRepository) ReplacePermissions(userID uint, permissions collections.Permission) error {
	ret := _m.Called(userID, permissions)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, collections.Permission) error); ok {
		r0 = rf(userID, permissions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemovePermissions provides a mock function with given fields: userID, permissions
func (_m *UserRepository) RemovePermissions(userID uint, permissions collections.Permission) error {
	ret := _m.Called(userID, permissions)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, collections.Permission) error); ok {
		r0 = rf(userID, permissions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClearPermissions provides a mock function with given fields: userID
func (_m *UserRepository) ClearPermissions(userID uint) (err error) {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddRoles provides a mock function with given fields: userID, roles
func (_m *UserRepository) AddRoles(userID uint, roles collections.Role) error {
	ret := _m.Called(userID, roles)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, collections.Role) error); ok {
		r0 = rf(userID, roles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplaceRoles provides a mock function with given fields: userID, roles
func (_m *UserRepository) ReplaceRoles(userID uint, roles collections.Role) error {
	ret := _m.Called(userID, roles)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, collections.Role) error); ok {
		r0 = rf(userID, roles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveRoles provides a mock function with given fields: userID, roles
func (_m *UserRepository) RemoveRoles(userID uint, roles collections.Role) error {
	ret := _m.Called(userID, roles)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, collections.Role) error); ok {
		r0 = rf(userID, roles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClearRoles provides a mock function with given fields: userID
func (_m *UserRepository) ClearRoles(userID uint) (err error) {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HasRole provides a mock function with given fields: userID, role
func (_m *UserRepository) HasRole(userID uint, role models.Role) (b bool, err error) {
	ret := _m.Called(userID, role)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint, models.Role) bool); ok {
		r0 = rf(userID, role)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, models.Role) error); ok {
		r1 = rf(userID, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasAllRoles provides a mock function with given fields: userID, roles
func (_m *UserRepository) HasAllRoles(userID uint, roles collections.Role) (b bool, err error) {
	ret := _m.Called(userID, roles)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint, collections.Role) bool); ok {
		r0 = rf(userID, roles)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, collections.Role) error); ok {
		r1 = rf(userID, roles)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasAnyRoles provides a mock function with given fields: userID, roles
func (_m *UserRepository) HasAnyRoles(userID uint, roles collections.Role) (b bool, err error) {
	ret := _m.Called(userID, roles)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint, collections.Role) bool); ok {
		r0 = rf(userID, roles)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, collections.Role) error); ok {
		r1 = rf(userID, roles)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasDirectPermission provides a mock function with given fields: userID, permission
func (_m *UserRepository) HasDirectPermission(userID uint, permission models.Permission) (b bool, err error) {
	ret := _m.Called(userID, permission)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint, models.Permission) bool); ok {
		r0 = rf(userID, permission)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, models.Permission) error); ok {
		r1 = rf(userID, permission)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasAllDirectPermissions provides a mock function with given fields: userID, permissions
func (_m *UserRepository) HasAllDirectPermissions(userID uint, permissions collections.Permission) (b bool, err error) {
	ret := _m.Called(userID, permissions)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint, collections.Permission) bool); ok {
		r0 = rf(userID, permissions)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, collections.Permission) error); ok {
		r1 = rf(userID, permissions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasAnyDirectPermissions provides a mock function with given fields: userID, permissions
func (_m *UserRepository) HasAnyDirectPermissions(userID uint, permissions collections.Permission) (b bool, err error) {
	ret := _m.Called(userID, permissions)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint, collections.Permission) bool); ok {
		r0 = rf(userID, permissions)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, collections.Permission) error); ok {
		r1 = rf(userID, permissions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
